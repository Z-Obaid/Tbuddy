/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tbuddy;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ZAY
 */
public class Mark extends javax.swing.JFrame {

    /**
     * Creates new form Mark
     */
    public static boolean editing=false;
    public static boolean addfinalmarkrow=false;
    static void finalmark() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    public Mark() {
        initComponents();
        newmarklayer.setVisible(false);
        instructiontext.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        markstable = new javax.swing.JTable();
        mback = new javax.swing.JButton();
        medit = new javax.swing.JButton();
        madstudnet = new javax.swing.JButton();
        madmark = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        finalmark = new javax.swing.JTable();
        newmarklayer = new javax.swing.JLayeredPane();
        newmarktext = new javax.swing.JTextField();
        changebutton = new javax.swing.JButton();
        instructiontext = new javax.swing.JLabel();
        savebutton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(857, 513));

        markstable.setBackground(new java.awt.Color(102, 102, 102));
        markstable.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        markstable.setForeground(new java.awt.Color(255, 255, 255));
        markstable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Names"
            }
        ));
        markstable.setColumnSelectionAllowed(true);
        markstable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        markstable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                markstableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(markstable);
        markstable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        mback.setText("Back");
        mback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mbackActionPerformed(evt);
            }
        });

        medit.setText("Edit");
        medit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                meditActionPerformed(evt);
            }
        });

        madstudnet.setText("Add Student");
        madstudnet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                madstudnetActionPerformed(evt);
            }
        });

        madmark.setText("Add mark");
        madmark.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                madmarkMouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("Marks");

        finalmark.setBackground(new java.awt.Color(102, 102, 102));
        finalmark.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        finalmark.setForeground(new java.awt.Color(255, 255, 255));
        finalmark.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Final Mark"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        finalmark.setColumnSelectionAllowed(true);
        jScrollPane3.setViewportView(finalmark);
        finalmark.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        newmarklayer.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        newmarktext.setText("New Mark");

        changebutton.setText("Change");
        changebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changebuttonActionPerformed(evt);
            }
        });

        newmarklayer.setLayer(newmarktext, javax.swing.JLayeredPane.DEFAULT_LAYER);
        newmarklayer.setLayer(changebutton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout newmarklayerLayout = new javax.swing.GroupLayout(newmarklayer);
        newmarklayer.setLayout(newmarklayerLayout);
        newmarklayerLayout.setHorizontalGroup(
            newmarklayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, newmarklayerLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(newmarklayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(changebutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(newmarktext))
                .addContainerGap())
        );
        newmarklayerLayout.setVerticalGroup(
            newmarklayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newmarklayerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(newmarktext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(changebutton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        instructiontext.setBackground(new java.awt.Color(102, 102, 102));
        instructiontext.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        instructiontext.setForeground(new java.awt.Color(255, 102, 102));
        instructiontext.setText("Left Click *ONLY* on a mark in the table to change it in the \"New Mark\" box");

        savebutton.setText("Save");
        savebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savebuttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 694, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(226, 226, 226))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(mback, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                                .addGap(37, 37, 37)
                                .addComponent(savebutton, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                                .addGap(33, 33, 33)
                                .addComponent(medit, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                                .addGap(44, 44, 44)
                                .addComponent(madstudnet, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                .addGap(33, 33, 33))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(instructiontext)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(madmark, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(newmarklayer))))
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mback, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(medit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(madstudnet, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(madmark, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(savebutton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(instructiontext, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(newmarklayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(127, 127, 127))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mbackActionPerformed
        MainMenu menu=new MainMenu();
        this.setVisible(false);
        menu.setVisible(true);
    }//GEN-LAST:event_mbackActionPerformed

    private void madstudnetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_madstudnetActionPerformed
        
        AddStudent name= null;
        try {
            name = new AddStudent();
            name.setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(Mark.class.getName()).log(Level.SEVERE, null, ex);
        }
        addfinalmarkrow=true;
    }//GEN-LAST:event_madstudnetActionPerformed

    private void madmarkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_madmarkMouseClicked
        NewMark newm=null;
        try {
            newm = new NewMark();
        } catch (IOException ex) {
            Logger.getLogger(Mark.class.getName()).log(Level.SEVERE, null, ex);
        }
        newm.setVisible(true);
        addfinalmarkrow=false;
    }//GEN-LAST:event_madmarkMouseClicked

    private void markstableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_markstableMouseClicked
        if(editing==true){
            markstable.getSelectedRow();
            markstable.getSelectedColumn();
            newmarktext.requestFocusInWindow();
            newmarktext.setText("");
        }
    }//GEN-LAST:event_markstableMouseClicked

    private void meditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_meditActionPerformed
        medit.setBackground(Color.darkGray);
        medit.setForeground(Color.lightGray);
        savebutton.setForeground(Color.red);
        editing=true;
        newmarklayer.setVisible(true);
        instructiontext.setVisible(true);
    }//GEN-LAST:event_meditActionPerformed

    private void changebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changebuttonActionPerformed
        int y=markstable.getSelectedColumn();
        int x=markstable.getSelectedRow();
        markstable.setValueAt(newmarktext.getText(), x, y);
        newmarktext.setText("");
        
    }//GEN-LAST:event_changebuttonActionPerformed

    private void savebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savebuttonActionPerformed
        
        if(newmarklayer.isVisible()){
            DefaultTableModel mtable = (DefaultTableModel)markstable.getModel();
            BufferedWriter wr=null;
            try {
                wr= new BufferedWriter(new FileWriter("marks.txt"));
            } catch (IOException ex) {
                Logger.getLogger(Mark.class.getName()).log(Level.SEVERE, null, ex);
            }
            //from table to file
            for(int i=1; i<markstable.getColumnCount(); i++){
                for(int j=0; j<markstable.getRowCount(); j++){
                    try {
                        if(mtable.getValueAt(j, i)!=null){
                            wr.write(mtable.getValueAt(j, i)+" ");
                        }
                        else{
                            wr.write("");
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(Mark.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                try {
                    wr.newLine();
                } catch (IOException ex) {
                    Logger.getLogger(Mark.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            try {
                wr.close();
            } catch (IOException ex) {
                Logger.getLogger(Mark.class.getName()).log(Level.SEVERE, null, ex);
            }

            //change style and hide things
            medit.setBackground(UIManager.getColor("Button.background"));
            medit.setForeground(UIManager.getColor("Button.foreground"));
            savebutton.setForeground(UIManager.getColor("Button.foreground"));
            newmarklayer.setVisible(false);
            instructiontext.setVisible(false);
            editing=false;
            Mark.CalcFinalMark();
            }
    }//GEN-LAST:event_savebuttonActionPerformed

    
    
    //add new names into table
    public static void intotable(ArrayList <String> newnames){
        DefaultTableModel mtable = (DefaultTableModel)markstable.getModel();
        for(int i=0; i<newnames.size(); i++){
            String me=newnames.get(i);
            mtable.addRow(new Object[]{me});    
            
        }
        
    }
    
    //add origial names to table when opened
    public static void FileToTabel(){
    //read names into rows
    BufferedReader read=null;
        DefaultTableModel mtable = (DefaultTableModel)markstable.getModel();
        try {
            read=new BufferedReader(new FileReader("names.txt"));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Mark.class.getName()).log(Level.SEVERE, null, ex);
        }
        String sname="";
            try {
                while((sname=read.readLine())!=null){
                    mtable.addRow(new Object[]{sname});
                }  } catch (IOException ex) {
                Logger.getLogger(Mark.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        
    //read into columns
    
        try {
            read=new BufferedReader(new FileReader("columns.txt"));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Mark.class.getName()).log(Level.SEVERE, null, ex);
        }
        sname="";
            try {
                while((sname=read.readLine())!=null){
                    mtable.addColumn(sname);
                }  } catch (IOException ex) {
                Logger.getLogger(Mark.class.getName()).log(Level.SEVERE, null, ex);
            }
        //close reader
        try {
            read.close();
        } catch (IOException ex) {
            Logger.getLogger(AddStudent.class.getName()).log(Level.SEVERE, null, ex);
        
        }    
}
    
    //add new column
    public static void ncolumn(String title){
        DefaultTableModel mtable = (DefaultTableModel)markstable.getModel();
        mtable.addColumn(title);
    }
    
    public static void addmarks(ArrayList <String> marks) throws IOException{
        
        DefaultTableModel mtable = (DefaultTableModel)markstable.getModel();
        
        for(int i=0; i<marks.size();i++){
            mtable.setValueAt(marks.get(i), i, mtable.getColumnCount()-1);
        }
        
    }
    
   public static void filemark() throws IOException{
       
       DefaultTableModel mtable = (DefaultTableModel)markstable.getModel();
        
       BufferedReader read =null;
       try {
            read=new BufferedReader(new FileReader("marks.txt"));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Mark.class.getName()).log(Level.SEVERE, null, ex);
        }
        String mark="", singlem="";
        int row=0,column=1;
            try {
                while((mark=read.readLine())!=null){
                    for(int i=0; i<mark.length();i++){
                        //if not space add to mark
                        if(mark.charAt(i)!=' '){
                            singlem+=mark.charAt(i);
                        }
                        //else add to graph and reset
                        else{
                            mtable.setValueAt(singlem, row, column);
                            singlem="";
                            row++;
                        }
                    }
                    column++;
                    row=0;
                }  } catch (IOException ex) {
                Logger.getLogger(Mark.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            read.close();
   } 
    
   public static void CalcFinalMark(){
       DefaultTableModel ftable = (DefaultTableModel)finalmark.getModel();
       
       if(finalmark.getRowCount()>0 && addfinalmarkrow==true){
            ftable.addRow(new Object[]{});
       }
       else{
           //remove already present marks and override
           if(finalmark.getRowCount()>0){
               for(int i=ftable.getRowCount()-1; i>=0;i--){
                   ftable.removeRow(i);
               }
           }
           
           
       for(int i=0; i<markstable.getRowCount(); i++){
           float tot=0, div=0;
           boolean rowcontain=false;
           for(int j=1;j<markstable.getColumnCount(); j++){
               String mark=markstable.getValueAt(i, j)+"";
               if(mark.length()>0 && markstable.getValueAt(i, j)!=null){
                    tot+=Float.parseFloat(mark); 
                    div++;
                    rowcontain=true;
               }
           }
           if(div>0 && tot>0){
               ftable.addRow(new Object[]{tot/div});
           }
           else if(div>0 && tot==0){
               ftable.addRow(new Object[]{"0"});
            }
           else{
               ftable.addRow(new Object[]{});
           }
       }
   }
   }
   
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Mark.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Mark.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Mark.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Mark.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Mark().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton changebutton;
    public static javax.swing.JTable finalmark;
    private javax.swing.JLabel instructiontext;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton madmark;
    private javax.swing.JButton madstudnet;
    public static javax.swing.JTable markstable;
    private javax.swing.JButton mback;
    private javax.swing.JButton medit;
    private javax.swing.JLayeredPane newmarklayer;
    private javax.swing.JTextField newmarktext;
    private javax.swing.JButton savebutton;
    // End of variables declaration//GEN-END:variables

    private BufferedWriter BufferedWriter(FileWriter fileWriter) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
